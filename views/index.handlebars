<div class="col-lg-12">
  <header>
    <div>
      <!-- Nav tabs -->
      <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item">
          <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home"
            aria-selected="true"><small>Occupancy</small></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile"
            aria-selected="false"><small>Incidents</small></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" id="settings-tab" data-toggle="tab" href="#settings" role="tab" aria-controls="settings"
            aria-selected="false"><small>Settings</small></a>
        </li>
      </ul>

      <!-- Tab panes -->
      <div class="tab-content">
        <div class="tab-pane active" id="home" role="tabpanel" aria-labelledby="home-tab">

          <div class="col-lg-12 mt-3">
            <div class="row row-cols-1 row-cols-md-2 align-items-md-center">
              <div class="d-flex flex-column align-items-start gap-2">
                <h3>Occupancy</h3>
                <p class="text-muted">
                    <small>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another
                      sentence and probably just keep going until we run out of words.
                    </small>
                </p>
                 <div id="chartContainer" style="height: 370px; width: 100%;"></div>
              </div>
              <div class="row row-cols-1 row-cols-sm-2 g-4">
                <div class="d-flex flex-column gap-2">
                  <h3 class="fw-semibold mb-0">100</h3>
                  <p class="text-muted"><small>Occupancy (%)</small></p>
                </div>
                <div class="d-flex flex-column gap-2">
                  <h3 class="fw-semibold mb-0">34</h3>
                  <p class="text-muted"><small>Available Rooms</small></p>
                </div>
                <div class="d-flex flex-column gap-2">
                  <h3 class="fw-semibold mb-0">33</h3>
                  <p class="text-muted"><small>Overdue for Review</small></p>
                </div>
                <div class="d-flex flex-column gap-2">
                  <h3 class="fw-semibold mb-0">56</h3>
                  <p class="text-muted"><small>Average Overdue for Review per patient</small></p>
                </div>
              </div>
            </div>
          </div>

        </div>
        <div class="tab-pane" id="profile" role="tabpanel" aria-labelledby="profile-tab">
          <div class="col-lg-12 mt-3">
            <h3>Incidents</h3>
            <p><small>scaffold is a CI/CD tool that supports rapid software development and publishing.</small>
            </p>
            <div class="mb-5">
              <div class="row row-cols-1 row-cols-md-2 align-items-md-center">
                <div class="d-flex flex-column align-items-start gap-2">
                  <div class="btn-group btn-group-sm" role="group" aria-label="Basic radio toggle button group"
                    id="heatmap-5-wkday">
                  </div>
                  <div class="row my-4">
                    <div class="col">
                      <div id="heatmap-5"></div>
                    </div>
                  </div>
                </div>
                <div class="row row-cols-1 row-cols-sm-2 g-4">
                  <div class="d-flex flex-column gap-2">
                    <h3 class="fw-semibold mb-0">100</h3>
                    <p class="text-muted"><small>Occupancy (%)</small></p>
                  </div>
                  <div class="d-flex flex-column gap-2">
                    <h3 class="fw-semibold mb-0">34</h3>
                    <p class="text-muted"><small>Available Rooms</small></p>
                  </div>
                  <div class="d-flex flex-column gap-2">
                    <h3 class="fw-semibold mb-0">33</h3>
                    <p class="text-muted"><small>Overdue for Review</small></p>
                  </div>
                  <div class="d-flex flex-column gap-2">
                    <h3 class="fw-semibold mb-0">56</h3>
                    <p class="text-muted"><small>Average Overdue for Review per patient</small></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="tab-pane" id="settings" role="tabpanel" aria-labelledby="settings-tab">Settings</div>
      </div>
    </div>
  </header>
  <footer class="pt-2 my-5 text-muted border-top hidden">
    <small>Uptime : <span id="timeLapsed">00:00:00</span>&middot; Version : <sspan>{{version}}</span></small>
  </footer>
</div>

<script>
  setInterval("timeLapsed()", 1000);
  window.onload = timeLapsed();

  var currentYear = new Date().getFullYear();
  var selectedMonth = new Date().getMonth();
  var currentYearData = [];
  setupYearToggles(currentYear);
  yearSelected(currentYear);

  function timeLapsed() {
    const then = moment(`{{uptime}}`);
    const now = moment().format('DD/MM/YYYY HH:mm:ss');
    const timeLapsed = moment.utc(moment(now, "DD/MM/YYYY HH:mm:ss").diff(moment(then, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm:ss")
    document.getElementById("timeLapsed").innerHTML = timeLapsed;
  }

  function yearSelected(selectedYear) {
    //https://tracksheet.co.uk/pipeline/api/incident/stats/
    currentYearData = []; currentYear = selectedYear; selectedMonthToProcess('Jan');
    $.ajax({
      type: "get", url:
        "https://carenotesplus.herokuapp.com/api/incident/stats/" + selectedYear, datatype: "json", success: function
          (resp) {
          if (!resp.error) {

            var incidents = [];
            var tasks = [];
            var date_pos_track = [];
            currentYearData = resp.data;

            const monthNames = ["January", "February", "March", "April", "May", "June", "July",
              "August", "September", "October", "November", "December"];

            // let's sort the incidents by date
            for (i = 0; i < resp.data.incidents.length; i++) {

              const current_date = resp.data.incidents[i].date.slice(0, 10);
              let current_count = 0;

              if (!incidents[current_date]) {
                incidents[current_date] = [];
                date_pos_track.push(current_date);
                current_count = 1;
              } else {
                current_count = incidents[current_date].count + 1;
              }

              const log = { count: parseInt(current_count), date: resp.data.incidents[i].date.slice(0, 10) };
              incidents[current_date] = log;

            }

            var sorted_incidents = [];
            for (let date_pos of date_pos_track) {
              sorted_incidents.push(incidents[date_pos]);
            }

            $("#heatmap-5").CalendarHeatmap('updateDates', []);
            $("#heatmap-5").CalendarHeatmap('appendDates', sorted_incidents);

          }
        }
    });
  }

  $("#heatmap-5").CalendarHeatmap([], {
    title: "",
    coloring: "viridis",
    legend: {
      divider: " - "
    },
    labels: {
      days: true,
      custom: {
        weekDayLabels: "dd"
      }
    }
  });

  function daysInMonth(month, year) {
    return new Date(year, month, 0).getDate();
  }

  function getMonthPos(selectedMonth) {
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    return (monthNames.indexOf(selectedMonth) + 1).pad();
  }

  function selectedMonthToProcess(selectedMonth) {
    if (currentYearData.length != 0) {

      // incidents
      var incidentReport = '';
      for (i = 0; i < currentYearData.incidents.length; i++) {
        const current_date = currentYearData.incidents[i].date.slice(0, 7);
        if (currentYear + '-' + getMonthPos(selectedMonth) === currentYearData.incidents[i].date.slice(0, 7)) {
          incidentReport = incidentReport + `<tr>
                        <td><small>`+ currentYearData.incidents[i].date + `</small></td>
                        <td><small>`+ currentYearData.incidents[i].description + `</small></td>
                        <td><small>`+ currentYearData.incidents[i].source + `</small></td>
                        <td><small>`+ currentYearData.incidents[i].severity + `</small></td>
                      </tr>`;

        }
      }
      document.getElementById("incidentReport").innerHTML = incidentReport;

      // tasks
      var taskReport = '';
      for (i = 0; i < currentYearData.tasks.length; i++) {
        const current_date = currentYearData.tasks[i].date.slice(0, 7);
        if (currentYear + '-' + getMonthPos(selectedMonth) === currentYearData.tasks[i].date.slice(0, 7)) {
          taskReport = taskReport + `<tr>
                        <td><small>`+ currentYearData.tasks[i].date + `</small></td>
                        <td><small>`+ currentYearData.tasks[i].systemid + `</small></td>
                        <td><small>`+ currentYearData.tasks[i].previous_point_marker + ' -> ' + currentYearData.tasks[i].current_point_marker + `</small></td>
                        <td><small>`+ currentYearData.tasks[i].status + `</small></td>
                      </tr>`;

        }
      }
      document.getElementById("taskReport").innerHTML = taskReport;
    } else {
      console.log("Array is empty!")
    }
  }

  function setupYearToggles(currentYear) {
    const yearView =
      `<input type="radio" class="btn-check" name="btnradio" id="btnradio3" onclick="yearSelected(` + (currentYear - 1) + `)"
                autocomplete="off">
              <label class="btn btn-outline-primary" for="btnradio3">` + (currentYear - 1) + `</label>
              <input type="radio" class="btn-check" name="btnradio" id="btnradio4" onclick="yearSelected(` + currentYear + `)"
                autocomplete="off" checked>
              <label class="btn btn-outline-primary" for="btnradio4">` + currentYear + `</label>`;
    document.getElementById("heatmap-5-wkday").innerHTML = yearView;
  }

  Number.prototype.pad = function (size) {
    var s = String(this);
    while (s.length < (size || 2)) { s = "0" + s; }
    return s;
  }

  $('#myTab a').on('click', function (e) {
    e.preventDefault();
    $(this).tab('show');
  });
  var chart = new CanvasJS.Chart("chartContainer", {
      animationEnabled: true,
      title:{
        text: "Email Categories",
        horizontalAlign: "left"
      },
      data: [{
        type: "doughnut",
        startAngle: 60,
        //innerRadius: 60,
        indexLabelFontSize: 17,
        indexLabel: "{label} - #percent%",
        toolTipContent: "<b>{label}:</b> {y} (#percent%)",
        dataPoints: [
          { y: 67, label: "Inbox" },
          { y: 28, label: "Archives" },
          { y: 10, label: "Labels" },
          { y: 7, label: "Drafts"},
          { y: 15, label: "Trash"},
          { y: 6, label: "Spam"}
        ]
      }]
  });
  chart.render();
</script>